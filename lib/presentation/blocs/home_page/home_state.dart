part of 'home_bloc.dart';

@freezed
class HomeState with _$HomeState {
  const factory HomeState({
    String? title,
    StateStatus? status,
    StateStatus? statusFilterHosts,
    StateStatus? statusEvent,
    StateStatus? statusActivities,
    StateStatus? statusExperiences,
    List<Host>? listHosts,
    List<Event>? listEvents,
    List<Activity>? listActivities,
    List<Experience>? listExperiences,
    List<LocationsDto>? listLocations,
    List<String>? emplacementList,
    bool? isFetching,
    bool? atTheEndOfThePageHosts,
    bool? atTheEndOfTheSearchPageHosts,
    bool? atTheEndOfTheFilterPageHosts,
    bool? atTheEndOfThePageEvents,
    bool? atTheEndOfTheSearchPageEvents,
    bool? atTheEndOfTheFilterPageEvents,
    bool? atTheEndOfThePageActivities,
    bool? atTheEndOfTheSearchPageActivities,
    bool? atTheEndOfTheFilterPageActivities,
    bool? atTheEndOfThePageExperiences,
    bool? atTheEndOfTheSearchPageExperiences,
    bool? atTheEndOfTheFilterPageExperiences,
    bool? isSearch,
    bool? isFilter,
    int? pageHosts,
    int? searchPageHosts,
    int? filterPageHosts,
    int? pageActivities,
    int? pageSearchActivities,
    int? pageFilterActivities,
    int? pageExperiences,
    int? pageSearchExperiences,
    int? pageFilterExperiences,
    int? pageEvents,
    int? pageSearchEvents,
    int? pageFilterEvents,
    int? selectedTab,
    String? startDate,
    String? endDate,
    String? city,
    String? emplacement,
    int? guests,
    EventPageDto? eventPageDto,
    HostPageDto? hostPageDto,
    ExperiencePageDto? experiencePageDto,
    ActivityPageDto? activityPageDto,
    String? minPriceRange,
    String? maxPriceRange,
    List<AttributeDto>? listAttributes,
    List<ActivityCategory>? listActivityCategories,
    List<String>? selectedAttributesId,
    List<String>? selectedActivityCategoriesId,
    List<String>? selectedPriceRanges,
  }) = _HomeState;

  factory HomeState.initial() => const HomeState(
      title: "Home",
      status: StateStatus.init,
      statusFilterHosts: StateStatus.init,
      statusEvent: StateStatus.init,
      statusActivities: StateStatus.init,
      statusExperiences: StateStatus.init,
      listHosts: [],
      listEvents: [],
      listActivities: [],
      listExperiences: [],
      listLocations: [],
      emplacementList: [],
      isFetching: false,
      atTheEndOfThePageHosts: false,
      atTheEndOfTheSearchPageHosts: false,
      atTheEndOfThePageActivities: false,
      atTheEndOfThePageEvents: false,
      atTheEndOfThePageExperiences: false,
      isSearch: false,
      pageActivities: 0,
      pageEvents: 0,
      searchPageHosts: 0,
      pageExperiences: 0,
      selectedTab: 0,
      startDate: "",
      endDate: "",
      city: "",
      emplacement: "",
      guests: 1,
      pageSearchActivities: 0,
      pageSearchExperiences: 0,
      pageSearchEvents: 0,
      atTheEndOfTheSearchPageActivities: false,
      atTheEndOfTheSearchPageExperiences: false,
      atTheEndOfTheSearchPageEvents: false,
      eventPageDto: null,
      hostPageDto: null,
      experiencePageDto: null,
      activityPageDto: null,
      minPriceRange: "0",
      maxPriceRange: "1000",
      listAttributes: [],
      listActivityCategories: [],
      selectedAttributesId: [],
      selectedActivityCategoriesId: [],
      selectedPriceRanges: ["0.00", "0.00"],
      isFilter: false,
      filterPageHosts: 0,
      pageFilterActivities: 0,
      pageFilterExperiences: 0,
      pageFilterEvents: 0,
      atTheEndOfTheFilterPageEvents: false,
      atTheEndOfTheFilterPageActivities: false,
      atTheEndOfTheFilterPageExperiences: false,
      atTheEndOfTheFilterPageHosts: false,
      pageHosts: 0);
}
